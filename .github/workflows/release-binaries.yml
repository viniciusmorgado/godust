name: Release Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: tar.gz
          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            archive: tar.gz
          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive: zip
          # Windows ARM64
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            archive: zip

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Package binary (Unix)
        if: matrix.archive == 'tar.gz'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../godust-${{ matrix.target }}.tar.gz godust
          cd ../../..

      - name: Package binary (Windows)
        if: matrix.archive == 'zip'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path godust.exe -DestinationPath ../../../godust-${{ matrix.target }}.zip
          cd ../../..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: godust-${{ matrix.target }}
          path: godust-${{ matrix.target }}.${{ matrix.archive }}
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect version
        id: version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            # Triggered by tag push - extract tag name
            VERSION=${GITHUB_REF#refs/tags/}
            echo "source=tag" >> $GITHUB_OUTPUT
          else
            # Triggered manually - read from Cargo.toml
            VERSION="v$(grep '^version = ' Cargo.toml | head -n1 | cut -d'"' -f2)"
            echo "source=cargo" >> $GITHUB_OUTPUT
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected version: $VERSION (source: ${GITHUB_REF:+tag}${GITHUB_REF:-cargo})"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move artifacts to release directory
        run: |
          mkdir -p release
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec mv {} release/ \;

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "Initial release" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          files: release/*
          body: |
            ## Installation

            ### Using cargo-binstall
            ```bash
            cargo binstall godust
            ```

            ### Manual Installation
            Download the appropriate archive for your platform below and extract the binary.

            ## Changes
            ${{ steps.changelog.outputs.changelog }}

            ## Available Platforms
            - **Linux**: x86_64, ARM64 (aarch64)
            - **macOS**: x86_64 (Intel), ARM64 (Apple Silicon)
            - **Windows**: x86_64, ARM64
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
